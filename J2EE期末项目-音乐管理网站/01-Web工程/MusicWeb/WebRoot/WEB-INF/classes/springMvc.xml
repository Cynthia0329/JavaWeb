<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
    
    
     <!-- 配置自动扫描的包 -->
     <mvc:annotation-driven/>
     <!-- 搜索除控制器以外的Service和Dao -->
	<!-- 进行类扫描，该配置用于扫描需要注入事务的类，为避免重复扫描而不扫描SpringMVC（即DispatcherServlet）已经扫描过的类 -->
    <context:component-scan base-package="com.wlql">
    </context:component-scan>
    
 	<!-- 配置拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean id="loginInterceptor" class="com.wlql.interceptors.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 资源配置（即告诉Spring分发器，该链接地址不是只向某个控制器，而是直接访问某个静态文件，例如css文件、图片文件、js文件等），示例间HelloWorld.jsp -->
	<!-- 配置静态资源路径 -->
    <mvc:resources mapping="/css/**" location="/css/" />
    <mvc:resources mapping="/js/**" location="/js/" />
    <mvc:resources mapping="/images/**" location="/images/" />

    <!-- 配置视图解析器 -->
    <!-- 控制器页面跳转配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
    <!-- 文件上传处理类的配置 -->
	<!-- 配置处理上传文件的对象，其ID不能随意命名 -->
    <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 设置上传文件的最大尺寸为100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
	</bean>
	
	 <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="10"/>
        <property name="maxIdle" value="5"/>
    </bean>
    
    
    <!-- 基于sqlSessionTemplate的mybatis配置 -->  
    <!-- 创建 sqlSessionFactory，给了数据源和配置路径  -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSource"></property>
	    <property name="mapperLocations" value="classpath:com/wlql/mapping/*.xml"></property>
	    <property name="configLocation" value="classpath:mybatis.xml"></property>
   </bean>
   <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	
	 <mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="fastJsonHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value><!-- 避免IE出现下载JSON文件的情况 -->
			</list>
		</property>
		<property name="features">
			<array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
				<value>DisableCircularReferenceDetect</value>
			</array>
		</property>
	</bean>
</beans>